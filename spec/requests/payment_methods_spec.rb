require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/payment_methods", type: :request do
  # PaymentMethod. As you add validations to PaymentMethod, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    { name: 'Boleto', message: 'Boleto gerado com sucesso' }
  }

  let(:invalid_attributes) {
    { name: nil, message: nil }
  }

  before(:each) do
    admin = create(:admin)
    sign_in admin
  end

  describe "GET /index" do
    it "renders a successful response" do
      PaymentMethod.create! valid_attributes
      get payment_methods_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      payment_method = PaymentMethod.create! valid_attributes
      get payment_method_url(payment_method)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_payment_method_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "render a successful response" do
      payment_method = PaymentMethod.create! valid_attributes
      get edit_payment_method_url(payment_method)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new PaymentMethod" do
        expect {
          post payment_methods_url, params: { payment_method: valid_attributes }
        }.to change(PaymentMethod, :count).by(1)
      end

      it "redirects to the created payment_method" do
        post payment_methods_url, params: { payment_method: valid_attributes }
        expect(response).to redirect_to(payment_method_url(PaymentMethod.last))
      end
    end

    context "with invalid parameters" do
      it "does not create a new PaymentMethod" do
        expect {
          post payment_methods_url, params: { payment_method: invalid_attributes }
        }.to change(PaymentMethod, :count).by(0)
      end

      it "renders a successful response (i.e. to display the 'new' template)" do
        post payment_methods_url, params: { payment_method: invalid_attributes }
        expect(response).not_to be_successful
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        {name: 'Cr√©dito', message: 'Pagamento autorizado'}
      }

      it "updates the requested payment_method" do
        payment_method = PaymentMethod.create! valid_attributes
        patch payment_method_url(payment_method), params: { payment_method: new_attributes }
        payment_method.reload
        expect(response).to redirect_to(payment_method_url(payment_method))
      end

      it "redirects to the payment_method" do
        payment_method = PaymentMethod.create! valid_attributes
        patch payment_method_url(payment_method), params: { payment_method: new_attributes }
        payment_method.reload
        expect(response).to redirect_to(payment_method_url(payment_method))
      end
    end

    context "with invalid parameters" do
      it "renders a successful response (i.e. to display the 'edit' template)" do
        payment_method = PaymentMethod.create! valid_attributes
        patch payment_method_url(payment_method), params: { payment_method: invalid_attributes }
        expect(response).not_to be_successful
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested payment_method" do
      payment_method = PaymentMethod.create! valid_attributes
      expect {
        delete payment_method_url(payment_method)
      }.to change(PaymentMethod, :count).by(-1)
    end

    it "redirects to the payment_methods list" do
      payment_method = PaymentMethod.create! valid_attributes
      delete payment_method_url(payment_method)
      expect(response).to redirect_to(payment_methods_url)
    end
  end
end
